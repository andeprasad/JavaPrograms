/*
 * Given two strings A and B, find if A is a subsequence of B.
 * Input:
 * A = AXY 
 * B = YADXCP
 * Output: 0 
 * Explanation: A is not a subsequence of B as 'Y' appears before 'A'.
 * 
 * Input:
 * A = gksrek
 * B = geeksforgeeks
 * Output: 1
 * Explanation: A is a subsequence of B.
 */
import java.util.ArrayList;
import java.util.List;

 public class GFG_CheckForSubSequence {
    public static void main(String[] args) {
        // String A = "AXY";
        // String B = "YADXCP";
        // String A = "gksrek";
        // String B = "geeksforgeeks";
        // String A = "RATAT";
        // String B = "KARAATTAT";
        String A = "cnejtvhjpxxznknhowbmkgpygvjrflqsngeklfnprjwihfrwvzkoluftdbfmyrqkecbfrnakspimrwzvruwcqhekpbrmhobgdsopwruatlgyzezdr";
        String B = "jwvcojehfhohpllaootsarenoksdilrgpvpovncwtdfmgahbqrguopwtaedwecwhgddulunorxvyadfvaplaeddnuvhmdqrnuqeomiyvouhzappxqmxbkuwxhjgxzxiwdffbavdyoubfggofmwewmkmlhwexkcmucqrsjyriwpwkwkzjcrxbupqbwditugngppfavhnpbiywcdtbdvazytybcwynlnprybauiigouospipvmziihwpbdzqzgrttbcyvwmezeerpbdzxaygxhuvkdvbozlopfxarsvebxzjlxkiixqvykhhavynhvxajcxsahgqrlovrytcpgjqgptednhdwkqwboyrhavcbhvtzvzdnyrkfymxrnifogvliimxtnkrsdvbysqshtkzqlsewnrjwlojgnqepzrvhlczaacxwhvpbfjpigcsgrrcqntaozcmvzpyulvepjxnlzrsmblkuuwuixztpthhbydcnffcdhypsmuruqkdngfkxafsnoiksagbycrrplfhhcwuzbvezljzqcnkkhmpbmjjcftzvpegvzsfimqlxhirenlldgrfxbqqdsenqelmgpaaawijyfakyyhdhblyxauhutfgyfkdpjnfkbrupcaukcffdrrxbbnzjnaglepcebqkdjcgrjyozgwpabxckwmjmnxhsdbbgnpbqtucuyqixmwnjwztjfcrkpypyierxfuusezetzwgdmekxlxztiwtgabdnkhgsikexwvnqtdtzadansuqdtbyrxpbppnyysqoagxzctnhutvzktsalmpaywztdrywyvunbefkzocbrdpwwpacgpjdnlrgbnssbpzhsvolqshkueemmxicymloqpqginfecfrwqiiesnilgkdrbthmqiqbbnecjkdbmwqzafytbxpgretbgeezumkzpwpepdfhndygqbqdikqlskgiqxdgflwkwfvqnczeaohfrruhdalujapqqiufezgcwmczqacdstbhtiyuravzjieuhggcygbinrzrxyujwhfpneaiqthqvjfvdszzwbtuilwpiziezlrdjnprxujroscnpesoapbvptyfwdegkdsdiglvjvmvnczizcxbvyddzxafawmjmsxtxqjahfkxfdenxppettqmqqcmvptvztsdyxybiwvxtxteamcibtybvxqiwvruggjyauskfzdlltiztgsgjorgnsevahhwfwgdbkpbjbqqssyfwacpgrdjvwekytjtbgnyunuaayyatmbwvikjdjwhuivbqbefusfnpsakxzkxbwjyxqxzucvypmacllskpjafxafltwuqxnyqafdjipmibljgvffhjmxmpridbsjloxknnextxzioeyblrbqpctgumdfvagimllthblhgmgvevjwovbsmhyqsxrckfotugyxstplijyclcmybptdecmpslkluxdmdmkdakvrffmnnbujanjoiwajexpkrwaniycpdpjtplrmkdsfsuunkvbvzrbbmbjqtfjfuveqxmyyvfjndsnhwkyjdwcwdirmigdquedpqfwxannfivxucqlerbelonjbqscebnwquedyvpkixqsnzrszvdaofnphnafdhssybyjrroevktqhchwmdltulpxuzfxhvnvtpnrhzsxeolowhnasigblrlmkbwdfrtanxaqysofrvtdzqvismbntdjljavpjzrmksvsmrngcltyclspjuqugrotdlrrxexxwvbwrlowrrvhwxtayyucmtunwitvgcjqiprpptezlbympzvbbqteykyrqlshmhwrudfvjwkudhoxhtjofjfhrxptnujzxambhsyledponkakexqugbblfxcsgxvfxdsvdvgjokxmqjpdetdoysmzflctlxhtkbjhrryoidrekassdmrlbttptsamcirjteuytychmiwpdfuvpamibknibrzedsopjkgthanuwqzplqiejrbtgponfxouelibqqueekoccitowhnedeviatnotzhgsylthalqvksuoojuhjqwlsjirqrwpjlfouwiwxdocikwnkseelrzfheqvvadqtaiqiyttbpiczaihotkippxfphptkueicmxrvlacylvfpzojpwugfwurkjtpjyaekmgtorendzbdtbckdsboeqzrqduzpdertruyczoncehwhynuobmcubjzntahknqtgvuokbeynvosxtyvzddkdjzhhibtukiipprzpildhiczqxglzjboqfhkqkpsonyobxudxhracvafcjcgoepdywduabhxhoapgxnrqdboqhorlqydmkvikvjppceczyiyoeottlwdaofdmucfpeldsejhqkhoaglhktkgwwybqjmuxjkummyzcalwozqhqpujupsbltabzjhdkqxnwfrkwqrlvaqfbiqoqvygfofojjneuxcgynlesxzxbhpoqltftpxryixieubjqvshdrrjewnsvnjoeptghzijthrulfdaadxupgdbsxorzyqjpolagszhajveevanyqthozhzsapuzhndnnezhqtpblaookhlavvxqfqbqmpfnxkjhibkguawrypuvlocuyoctmzygbkeealbfwkbqfbkmeeormmaqoefyvmzysitnitztmlxfsxtbpeqdpxtckubygiyisgmsgldqdwwpcmvysnidzqdalreazavxcnjvoznaqdwtzhenliapnmqudysczsswxspwlgbtlilnefgdzghwnxscsndijjvhilaacjtkrjlatknmicbmfmlvygvtmcfmvstomeuuhwaqjutagkozupnwtufdfniahfbogvzkenirwhbhlmaiyhrjwqoyknvviueclxgbazuihcbgrgxrwfviwtidpqmxihsceqsoppkdpdmafwrtjmrkzzamvfocgiolgmlqhcgexqhlokuausjnetaikbjnzxtjpbnkosqkiystcjjqsjfdbncjdovxekhwaoqpriwmcxbqcmiowwjkokwlbhnqoolzypenguwhsyvfiycgzqjfxnutcwxwpktpydmkeioxfoojovhbpsqzcsttsqwnhbvafjkcoyuamvrkakgbloyugmjaaweyknlqcqxoltdssaakuzmuvriotpnqehihxgdnomohatpvgeavzyplbuoxuswjbliaijzhkpndsetxrgjydbauubhwowcsymgefhlerhqawjyqkqtlqfrntyeqrrvtlskkcvokzerirnhkoiekawypkitdvibucdmqytaztqceparfzthkqiaqnizbikqsdnbibnvjsqyeplgfcgyqdcvstukegbebefbxobpktfpgvmngiguqqnngqhwimanxiirdfrgrrkjfdmtimlzcyjiyvqgeeaezpxlevbszennmscoebhsspjijbcobfdffwaoazgnkdbblnqlhiolatasttdqfxnmcfdcqgpewqgosgxwhgyymnijmabmmihposrdphvkacrxuwejexhistffzlcefloapulmtvodajhefdoyjgtwwakdofuronljwigbupzqqooyzgjmevssupcvkklzzguizgnxmdjboixputlvdcstedsntfiplgjuuscayogibouqvvlusqwzzbnfhekfammraflzovgnsjirrvwhisbqudfrtjyqdyemujligfymzbqesdkryskgvecojhosuhjwbzprxtrgqdwjkcykooljusrwrfgpnanlywbcieppzkfyxeveqvsvssnwmbjjvgznspunhznuplctwgpsapukpmlwwtonwwebkbwhupgqrnbubwrfrtewxjbblmwhylcmrhiwazxprzzegzydyvcqnmxhuyxusqnumghpptalrejdsgexcpvadhrulqljzvoarubofwjoxfbtksxxezgttztrltwwsjqckgnaqbxqyxhmoeqnbtaugkhpgourlkeqrhizbtbciwqkglqrsshswhcmasbwqezmdabzndcutnrfvsilsjdcqyxfsgtlnelgjwyrkbebojhpzhbhyztwkcpgufevglusnsrdwuylaxkwolxpwwevywwvhvwlgpdsbbxovgfxbsqjuxolopzchbyyxdwvzizzhyfuywpfjlhwqsnmpjondyilwnrizdvzmyzyskqfutxsxjdazdwnslfyjnkqoevzoxgaapjaetesubgymwxcvfcpwedtbqvepcpubazkdmuamrxhfscixqegjfkrceviiwueawuifgpuuxploqsvtdhavcsidrvpcowgiutqccjtvikutwfquwbzwpwqpyxkvhepwmffgduyuspzzxofbsrfwrbwnimshocljpcbvoulaxnndlfxhockqolkfapraebzfhdkcelppqkefhxfxcuwexyvfwbwqvlliuxwejmibwtjxqjheymhblcyylohtatipnwhvigypmkklmrguxrfnxbtgshmzoysmfhwzvmzqfgziqizvtbhyulsraotscgjjbprpxgzjrmasoblvrehthwewcsounkkfougvuyeobqfppqjjwlcyhmkjbiddwwtskrwdxbjnchigzgderboiepmouswhwddojebfpygcihkpbakkblcnnexmcpiojixytosijtijtrlteckhtwvvmeznaxtzcifnjkyrspqiwgaenqtdeabrneelebipzfahfqfughepwbomfvrrfxnztmsdpiibhxxkjfobehqzrovyvwivsqfplkjqcetxcyzunrdmpcgrdfvcgqgdomjifrpacofhzcbjcdxyufijdwyjoifimfagromdehqyvjzoyuwipcljnfunacheloyzqctpxzoyawugaiikwilggwkudohogqdcupstynwdvyerosnglktojoylqzvwqbpdavslrwackcmfxrbmoezzvgsqmghkocyddmsnlwehegchcvchqougvzdlmphbosnouoyqlfsjtihnohexplqhntvfbrlkfltooniomuksgridmqmiysfasynolbzfgssuotikdqgmcejojsipbigmahsilbdnsabidiwejiqgeezimmoiylhnufaamicfktkxvarwvfukrgiinseabmrakjyptdpgvvlxbgnpyxkphcxylvomsorrfxavlmwcejqwdnexdurnfacgbgqdytlwkntexjgmcgzzrgqtynvqhjidcjcxmywmmlngsvnkozhaixxpevilpeaxdjcalddvapcbznzeqksjfyzfeqsqytlybyisbrjeihohtejxjbzhkgmovvbpfngbdrfstfxdbnfqqcfdqyysrqyyyzdwaulokxhzyjpmyvcorumeguicjhhnwoighbfjpoiwvfkyursppncsepleijsccgjwlhuhmtufpuixjyvtptgorxziplhaogmunyzwwrjdoljxzbebuxczmipbnafjbobgttsriclcxxlvwztsnbuhrvmrnaxxyqyvwfswdjaamxulicgqzakqrsiokqsooylrwrcdyfdwylydclpfinklidolbuzaihamzhwtdgqcfrteysumvacuyguqbkuaztxhrntctjvwiibwzzhtazohawsiktalcpeivwtvqcweingocscgihllruoljdzxeerdjdnyrsrpcjnwwoqdlszmfxqhccwufdltkchxcmqcbgugyrtbfsukuhcpqqpgmmezwaqveqhdfkvvzlnlqnkyfowrhkzujpocyadwqdicjpgjcbsndijisnsrnjemsoxptyhwnxyrzhbrswsvupvcwlvkrdzsopvjwbvuirpblidvbcndchgzimvyhukywygdewhmnqmvuxblywlmoxsclpqxoiwowfkwaxssjmutffjcbyvvcaajahcoekjfnwmftlebkovxqboisxedmeckmwrbakyavpyinarhkfvnxruvyomlnrsysfxvwadwxpybjzmlqbzetpliobeyetcfyrmgurylxxwkndimrxkceuzdszehligtdcpyqkvdqawipekjfiaphbkkxnwjoaiyhfmcmpctriwcnjxumuekubkybfctsnifwfwwtswhhjywxqtqdhadtrhffqnxzrrmfmtppewbfoakqackuiepvvkkbrxxowfrpqctvtywdekszulgcekhfdfpqonqytrewkucjnvgmfrjphuevcqqlgsmlquuujxfybbxmanmcsjryvhtvjwezlryajellhgresagyzakespijuyhfnyfoaihoeakhpsfqphnbpaksnqtlodwqgfpcijnrgfjjzayjowzhqtlhgvxhtcfivbbkaitcpyyfescnxqgdjenqohuydfsppugvkwgxwoyinthssnknnlufxkmptrpgcsnywaadsbgslrwujjwistblqxntsarjvbaoledjtaogqlbbsiaxthaegsdsbcllzlobvptcjzotgdsorobgelrjbmiretpjaapgafezxemvrpmiwwpxgbfqhdsdnllknjjheyjpcrdbzxnpznaowlvizyrbxonfzdvfyivtpkjvanqcmtjdwrpeicbqtejdqqdgkouvvruwvcvdvtinpkxhtbkzwrxzidldbkgycilazzcqfpkjxfzwdyjbabbfkcbxqjxrgzeafoggtdvbdubdepttchoizdgbgdoxqtcnjsfcpbzqeqnrubkfnxjhuyzshnwztujsybhoidneszxuesqgnxfrytiohtvwxvxsldfdbslhqrcpnnuwftwxvhtkchxrrtjkkmwjakpvjmrehxktnjgqhooichqwccxbzowguesalwdidaqexliblpqkndpyakyttnfzvqqpzxiyeonaifnzuvwjeiptomyrhebbmjxgoadgsavjaasakkskykdjxbdctvylofmcydapyysulykrosotinizdrcjufvkjifquzjpmtltprkazfaowurcxprtpbvaufdqmvltpjubjvldhfpqvjxkfhyluxkxmfsotxwvwlcqsssbpdxxzsdturomqdwszouwivkipdtpfgohmvgebbkazlnmcnxlsdqapspvtjpjmrbluirnmvkvmdpoktovdssbjtyhzylvvnjilemyqihlcbrkpgcztfburcwbfilexgkqiqumamzodassqwvsbqblzevndgocrtvckmuqqytiuoundjvhvvofjjbcvoumdimcegfylwkmautgvmoiicdaajmgdxpuinntrjzwkumpkfvlqzpcqnoabwvrpzemfgpqbhivlexfovagqgazksnlzwhudkxzepjgshmbhobyccsafvnutapdfpcsvmuwyelgffejfgbvjyxzslrzihchzhisjljkehzaxqbuxcvyydmynitlnvcltojrxglggvafswufktzaowmoianbckkecxthjzfuraiatnflbnqyldskymbnfqqvfklcrvhijslefdlvokpfkcmxkcjmunbsghebuyjvpjzpogyypiomqzrsmcjqlzptewuupdgjqvhztlqyznltzgfchmvwvhygmhnqdamxamwwfsmkjfljrlucgurinxfvueqiobtsesqigzqzoocsxodunztfekarjpjhyxkwwxpuqvwsgsszqtoxfkxwkoovkducgmjphbvcuuoypejcripzdtvgqobhxkgpvbeoovdbldhgbyewijkqlhucalxucyltpgwlwbfpqpqjatmiddajhgtwcflkizunjywxzljcoqbzisxdmgmzowwruxhtorzishflvtclxzaxdrhkvysktzxtdxzhlwgwslzeffpdvkdxnsmpglodtlnjvtyagystceszkpgylyzjssbvzpmgbscfqeqpjjfbxgodftbayflagwwjapvtfpsgxwzkudbcvktzwspysuhtxuzmruztvsyplfgwwrfnjxqmiwcisuxkxxzfzskjumubwfheixfzexjmcfyvrgpfljfffagurqqvdeduecxicfcautxevdoxuqvzmmbzksznvtguvpqfevniiueurpiulczysikoyktaermiixtoohxabocmlvpzqdrbjyglwozboscelvwhinfrehtvavkohtxwceunmcvrofobxpdacxpiafhsplrnjzdaiaemlvlrnkxmdaasnkdbncqnkhpplrjgmhunrpuwkznhplxtnqnobvlncdzhluvxhnffxeinyuyrjsqqwciuqcnnefgtapbwdddvkinvrdbyyuhnvvefnjlygxivdedgeiyaobgflvyedjwxddtekgkrrjtgkdjavkdoadojvizittxlcawgrnxhixtgeenlxxkunmyiqtlhppykfuvoactbvatiudsxmzzgjcwzngydvbafthddehlrfwkverljuullaxglwwovzkwxewbenrsekfrqdwtjgnxbolgblhknguuzfwaetmaivncoyzstcmdxizykkvejvcirgpadaenarecqzkeismtwkhpfjnjwoaxmcuhorhnccovtqsstcvjnwfxwoezjkkzkexvgnpjvbzfbidkszyudxdyeqestwowvyyawyeoogmnvcnaesrwmffoqoyhlwgeknrihncszcxxabdtprtfvzuivzcanrtisksbyxttvygnrxjguhgetydjsdicboafdrucuitvgorrvvazrxnprqaegcwlabblhwrisxdbdjsirefsbhyzowiewvaboejclxcfvutcckvbimyljgmcpdrezryriowypvwtbepiaveiumgufmbwfgxnuronzuaeuonxhgtfqjdxoaewaehqjlgsvwgnyphndgvhgmnhrnncsphoojaogweszozkqovttoyrxvhgyrwuiamosxubqcvxhfzqhrtifwymlcxlpkhwtttwahtxkaibkemdiizokhgkgnctfcjmgspzlqzalfrblgaedoycretrpiwcbasqycuvqcrhcvxpnttpaarmshzeqmhwcxoieswciflgkwdjfgdlquiogdbrmxzmkjejgffnymbzkgnobaqeuxhzjbrxblowvmfjuspazmllpvlcizjqpcavjgzwmciytxrqavkviazifrcqkdguytdxjcpsmvdvsmxxpuqjpbnkrarsjtastjaxklhaionrjbjcwgxcjjbwtukuyervyhxtucxwnqjkaorsokfxbqrjbjkfsbmvghnqnywflibriyhpmxdwkjszqavjvtrotoykmkgtpashjsltwzvrxfuwzmjjxexhwueilisqvrdujwdneipnramgoaupzcesugxgpytzmiymrqpddylsrfvnfacplwtpcplwpmdowrxtskukjjzxxhgrhehwqfknjdknksarsbpsircupjwiygiksfzydlycrpsfjqnojxpjnnvpgxndotvxxmulbtzkhngsptfslnxqkmhensirhdqpwbzltkjgtmmnxaqgzksitjcrptyamqafxjijcyygvpxzvqzwrxezjjuftcramtflsdkmvamrkusngpqeuudevypgqllgdqueheaesnmdtqxmvclckdbrasasifmevodixuodetfqviypfdkreligruuomlauxiexxxmhjzxprcmdvrxkzlamtedqjgxbvmfisovngotitpmvuryxoqnbbgsaajhpszdfeyxglkdstaqghlvmgcwatkhkeohlkheuiejggfhzqhnsvanphbxhilmtixpfxvtfnsfdjqndgljftqorarzkbcjyhhrbsicnylinzszfyasxjclwmaruftudjtdaaxybavyvwcpnzbsrsrvamsvxvoukbljgtittjlxhxemxmvfxflsskphhqrltlghhlrvvekbtrykueihpjlilidoplvkjohnaxnhjdafieguqrxaibkijqyjpcw";
        System.out.println(isSubSequence(A, B));
    }

    // This is failing for a testcases where the input is above.
    static boolean isSubSequence(String A, String B) {
        List<Integer> li = new ArrayList<>();
        int counter = 0;
        for (int i = 0; i < A.length(); i++) {
            for (int j = counter; j < B.length(); j++) {
                if(A.charAt(i) == B.charAt(j))
                {
                    counter = j;
                    li.add(j);
                    break;
                }
            }
        }
        for (Integer integer : li) {
            System.out.println("Integer in List is : " + integer);
        }
        System.out.println();
        int count = 0;
        for(int i=0;i<li.size()-1;i++)
        {
            System.out.println("I is : " + li.get(i) + " : " + B.charAt(li.get(i)) + " and i + 1 is : " + li.get(i+1) + " : " + B.charAt(li.get(i+1)));
            if(li.get(i) < li.get(i+1))
            {
                count++;
            }
        }
        System.out.println("The length of Count is : " + count);
        System.out.println("The Length of A String is : " + A.length());
        return count+1 == A.length();
    }
}
